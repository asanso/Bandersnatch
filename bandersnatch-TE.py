import sage.all
from sage.rings.finite_rings.finite_field_constructor import FiniteField

# Twisted Edwards Bandersnatch curve

p=52435875175126190479447740508185965837690552500527637822603658699938581184513
Fp = FiniteField(p)
a=Fp(-1)
d=Fp(22457052480157351153166744122174204267516718734452689313406854861748225843558)

a1=Fp(16179988757916560831507847845231514874200184790675259448634235621035630577620)
a2=Fp(37446463827641770816307242315180085052603635617490163568005256780843403514038)
a3=Fp(14989411347484419663140498193005880785086916883037474254598401919095177670475)
b1=Fp(37446463827641770816307242315180085052603635617490163568005256780843403514038)
b2=Fp(49995394288705824048412323181233501568427422566656462167931560499078999622807)
b3=Fp(2440480886420366431035417326952464269263129933871175654672098200859581561706)
c1=Fp(45011286416230244795025675789448735954909075920240510176570714605495915626355)
c2=Fp(7424588758895945684422064718737229882781476580287127646032944094442665558158)

def psi(x,y,z) :
    z2 = z**2
    fy = a1 * (y+a2*z) * (y+a3*z)
    gy = b1 * (y+b2*z) * (y+b3*z)
    hy = (y+c1*z)*(y+c2*z)
    return [x*fy*hy,gy*z2*y, z2*y*hy]

# test
x = Fp.random_element()
y2 = (1-a*x**2) / (1-d*x**2)
while not(y2.is_square()):
    x = Fp.random_element()
    y2 = (1-a*x**2) / (1-d*x**2)
y = y2.sqrt()

z = Fp.random_element()
x *= z
y *= z

X,Y,Z = psi(x,y,z)

assert a*X**2*Z**2 + Y**2*Z**2 == Z**4 + d * X**2 * Y**2

